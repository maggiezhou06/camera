{"version":3,"sources":["webpack:///src/src/App.vue","webpack:///src/components/src/components/Camera.vue","webpack:///src/views/src/views/Gallery.vue","webpack:///src/views/src/views/Login.vue"],"names":[],"mappings":"AAwOA,KACA,oDAAA,CACA,kCAAA,CACA,iCAAA,CACA,iBAAA,CACA,aACA,CACA,WACA,UACA,CACA,YACA,cACA,CACA,MACA,wBACA,CACA,QACA,aACA,CACA,QACA,qBACA,CACA,0BACA,oBAAA,CACA,eACA,CACA,UACA,oBACA,CACA,mBACA,mCACA,CCWA,iCACA,kBAAA,CACA,UACA,CACA,wCACA,aAAA,CACA,eACA,CACA,sBACA,UACA,CACA,yCACA,mCACA,aAAA,CACA,2BAAA,CACA,aAAA,CACA,SACA,CACA,CACA,8BACA,iBACA,CCpPA,yBACA,SAAA,CACA,UACA,CCLA,wBACA,WAAA,CACA,qBAAA,CACA,qBAAA,CACA,WAAA,CACA,gBAAA,CACA,YACA","file":"app.bd754bbb.css","sourcesContent":["<template>\n  <div id=\"app\">\n    <div>\n      <b-navbar class=\"nav-bg\" toggleable=\"lg\" type=\"dark\">\n        <b-navbar-brand href=\"#\">Vue Camera</b-navbar-brand>\n\n        <b-navbar-toggle target=\"nav-collapse\"></b-navbar-toggle>\n\n        <b-collapse id=\"nav-collapse\" is-nav>\n          <b-navbar-nav>\n            <b-nav-item to=\"/\">Camera</b-nav-item>\n            <b-nav-item\n              to=\"/gallery\"\n              :disabled=\"cloudname.length === 0 || preset.length === 0\"\n            >Gallery</b-nav-item>\n          </b-navbar-nav>\n\n          <!-- Right aligned nav items -->\n          <b-navbar-nav class=\"ml-auto\">\n            <b-nav-item>\n              <div class=\"settings\" v-b-modal.modal-prevent-closing>\n                <i class=\"fas fa-cog\"></i>\n              </div>\n\n              <b-modal\n                id=\"modal-prevent-closing\"\n                ref=\"modal\"\n                title=\"Cloudinary Upload Info\"\n                @show=\"resetModal\"\n                @hidden=\"resetModal\"\n                @ok=\"handleOk\"\n              >\n                <form ref=\"form\" @submit.stop.prevent=\"handleSubmit\">\n                  <b-form-group\n                    :state=\"cloudnameState\"\n                    label=\"Cloudname\"\n                    label-for=\"cloud-name-input\"\n                    invalid-feedback=\"Cloudname is required\"\n                  >\n                    <b-form-input\n                      id=\"cloud-name-input\"\n                      v-model=\"cloudname\"\n                      :state=\"cloudnameState\"\n                      required\n                    ></b-form-input>\n                  </b-form-group>\n                  <b-form-group\n                    :state=\"presetState\"\n                    label=\"Preset\"\n                    label-for=\"preset-input\"\n                    invalid-feedback=\"Preset is required\"\n                  >\n                    <b-form-input id=\"preset-input\" v-model=\"preset\" :state=\"presetState\" required></b-form-input>\n                  </b-form-group>\n                  <b-form-group>\n                    <b-form-checkbox\n                      id=\"clearsettings\"\n                      v-model=\"clearsettings\"\n                      name=\"clearsettings\"\n                      value=\"true\"\n                      unchecked-value=\"false\"\n                    >Clear Settings</b-form-checkbox>\n                  </b-form-group>\n                </form>\n              </b-modal>\n            </b-nav-item>\n\n            <b-nav-item>\n              <div class=\"settings\" v-b-modal.info-modal>\n                <i class=\"fas fa-info-circle\"></i>\n              </div>\n\n              <b-modal id=\"info-modal\" ref=\"modal\" title=\"Instructions\">\n                <p>\n                  You need to\n                  <a\n                    href=\"https://cloudinary.com/users/register/free\"\n                    target=\"_blank\"\n                  >register for a Cloudinary account</a> to get a cloud name.\n                </p>\n                <p>\n                  Once you have an account go to settings | upload to create an unsigned\n                  preset.\n                </p>\n                <p>\n                  For information on creating an unsigned upload preset, look\n                  <a\n                    href=\"https://cloudinary.com/documentation/upload_images?query=settings%20upload%20preset&c_query=Upload%20presets#upload_presets\"\n                    target=\"_blank\"\n                  >here.</a>\n                  Be sure to choose the unsigned option when creating the upload preset.\n                </p>\n                <p>\n                  Click on the settings icon (gear) to enter your cloud name and preset.\n                  This will allow you to upload your images to cloudinary and then view them using the Gallery navigation link.\n                </p>\n                <div id=\"nav\">\n                  <router-link v-if=\"authenticated\" to=\"/login\" v-on:click.native=\"logout()\" replace>Logout</router-link>\n                </div>\n                <router-view @authenticated=\"setAuthenticated\" />\n              </b-modal>\n            </b-nav-item>\n          </b-navbar-nav>\n        </b-collapse>\n      </b-navbar>\n    </div>\n\n    <b-container>\n      <b-row class=\"routes\">\n        <b-col sm=\"12\">\n          <router-view></router-view>\n        </b-col>\n      </b-row>\n    </b-container>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: \"app\",\n  created: function() {\n    if (this.$ls.get(\"cloudname\")) {\n      this.cloudname = this.$ls.get(\"cloudname\");\n    }\n    if (this.$ls.get(\"preset\")) {\n      this.preset = this.$ls.get(\"preset\");\n    }\n  },\n  data() {\n    return {\n      cloudnameState: null,\n      presetState: null,\n      clearsettings: \"false\",\n      expire: 3600000,\n      authenticated: false,\n      mockAccount: {\n          username: \"maggiezhou06\",\n          password: \"test123\"\n      }\n    };\n  },\n  computed: {\n    cloudname: {\n      get() {\n        return this.$store.state.settings.cloudname;\n      },\n      set(value) {\n        this.$store.commit(\"updateCloudname\", value);\n      }\n    },\n    preset: {\n      get() {\n        return this.$store.state.settings.preset;\n      },\n      set(value) {\n        this.$store.commit(\"updatePreset\", value);\n      }\n    }\n  },\n  mounted() {\n    if(!this.authenticated) {\n      this.$router.replace({ name: \"Login\" });\n    }\n  },\n  methods: {\n    setAuthenticated(status) {\n      this.authenticated = status;\n    },\n    logout() {\n      this.authenticated = false;\n    },\n    checkFormValidity() {\n      if (\n        this.cloudname &&\n        this.cloudname.length > 0 &&\n        this.preset &&\n        this.preset.length > 0\n      )\n        return true;\n      else {\n        this.$bvToast.toast(\n          `Enter cloudname and preset to complete form save.`,\n          {\n            title: \"Settings\",\n            autoHideDelay: 5000,\n            appendToast: false\n          }\n        );\n        return false;\n      }\n    },\n    resetModal() {\n      this.cloudnameState = null;\n      this.presetState = null;\n    },\n    handleOk(bvModalEvt) {\n      // Prevent modal from closing\n      bvModalEvt.preventDefault();\n      // Trigger submit handler\n      this.handleSubmit();\n    },\n    handleSubmit() {\n      //clear local storage and return\n      if (this.clearsettings === \"true\") {\n        this.cloudname = \"\";\n        this.preset = \"\";\n        this.clearsettings = \"false\";\n        // remove from local storage\n        this.$ls.clear();\n        this.$nextTick(() => {\n          this.$refs.modal.hide();\n        });\n        return;\n      } else {\n        // Exit when the form isn't valid\n        if (!this.checkFormValidity()) {\n          return;\n        } else {\n          this.$ls.set(\"cloudname\", this.cloudname, this.expire);\n          this.$ls.set(\"preset\", this.preset, this.expire);\n        }\n      }\n      // Hide the modal manually\n      this.$nextTick(() => {\n        this.$refs.modal.hide();\n      });\n    }\n  }\n};\n</script>\n\n<style>\n#app {\n  font-family: \"Roboto\", \"Avenir\", Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n}\na.settings {\n  color: black;\n}\n.settings i {\n  font-size: 1rem;\n}\ninput {\n  text-transform: lowercase;\n}\n.routes {\n  margin: 10px 0;\n}\n.nav-bg {\n  background-color: #000;\n}\n.router-link-exact-active {\n  color: white !important;\n  font-weight: bold;\n}\n.nav-link {\n  color: white !important;\n}\n.nav-link.disabled {\n  color: rgba(255, 255, 255, 0.75) !important;\n}\n</style>","<template>\n  <div class=\"camera\">\n    <!-- <p>Camera State:{{cameraState}}</p> -->\n    <b-row>\n      <b-col sm=\"12\">\n        <div>\n          <video v-show=\"cameraState\" playsinline autoplay></video>\n          <canvas v-show=\"!cameraState\"></canvas>\n        </div>\n        <div class=\"actions\">\n          <b-button-group>\n            <b-button v-if=\"!cameraState\" :disabled=\"isStartEnabled\" v-on:click=\"start\">Camera</b-button>\n            <b-button v-if=\"cameraState\" :disabled=\"isStartEnabled\" v-on:click=\"stop\">Stop</b-button>\n            <b-button v-if=\"cameraState\" :disabled=\"isStartEnabled\" v-on:click=\"snapshot\">Snapshot</b-button>\n            <b-button v-if=\"isPhoto\" :disabled=\"!isPhoto\" v-on:click=\"download\">Download</b-button>\n            <div v-if=\"isPhoto\" v-b-tooltip.hover>\n              <b-button\n                :disabled=\"!isPhoto || settings.cloudname.length === 0 || settings.preset.length === 0\"\n                v-on:click=\"upload\"\n                v-if=\"isPhoto\"\n              >Upload</b-button>\n            </div>\n            <input id=\"name\" placeholder=\"Enter name: \">\n          </b-button-group>\n        </div>\n      </b-col>\n    </b-row>\n    <b-row>\n      <b-col sm=\"12\">\n        <form class>\n          <b-form-select\n            v-model=\"selectedDevice\"\n            :options=\"options\"\n            v-on:change=\"deviceChange()\"\n            size=\"sm\"\n          ></b-form-select>\n        </form>`\n      </b-col>\n    </b-row>\n    <b-row>\n      <b-col sm=\"12\">\n      </b-col>\n    </b-row>\n  </div>\n</template>\n\n<script>\n// https://cloudinary.com/documentation/image_upload_api_reference\n// https://codepen.io/team/Cloudinary/pen/Edxjbj\n// https://support.cloudinary.com/hc/en-us/articles/209754169-Is-it-possible-to-upload-directly-to-Cloudinary-using-pure-Javascript-code-\nasync function uploadToCloudinary(cloudName, preset, fileData) {\n  try {\n    let fd = new FormData();\n    let url = `https://api.cloudinary.com/v1_1/${cloudName}/image/upload`;\n    fd.append(\"upload_preset\", preset);\n    fd.append(\"tags\", \"browser_upload\");\n    fd.append(\"file\", fileData);\n    let res = await axios({\n      method: \"post\",\n      url: url,\n      data: fd\n    });\n    return await res.data;\n  } catch (err) {\n    throw err;\n  }\n}\n// import cloudinary from \"cloudinary-core\"\nimport axios from \"axios\";\nimport { mapState } from \"vuex\";\nexport default {\n  name: \"Camera\",\n  data() {\n    return {\n      video: null,\n      canvas: null,\n      fileData: null,\n      isStartEnabled: true,\n      isPhoto: false,\n      stream: null,\n      currentStream: null,\n      devices: [],\n      options: [],\n      constraints: {},\n      selectedDevice: null,\n      cameraState: true\n    };\n  },\n  computed: mapState([\"settings\"]),\n  methods: {\n    upload: function() {\n      if (\n        this.settings.cloudname.length === 0 ||\n        this.settings.preset.length === 0\n      ) {\n        this.$bvToast.toast(\n          `Upload to Cloudinary unsuccessful: use settings to provide cloudname and preset`,\n          {\n            title: \"Cloudinary Upload\",\n            autoHideDelay: 5000,\n            appendToast: false\n          }\n        );\n        return;\n      }\n      uploadToCloudinary(\n        this.settings.cloudname,\n        this.settings.preset,\n        this.fileData\n      )\n        .then(result => {\n          this.$bvToast.toast(`Upload to Cloudinary successful`, {\n            title: \"Cloudinary Upload\",\n            autoHideDelay: 5000,\n            appendToast: false\n          });\n          this.cameraState = true;\n          // eslint-disable-next-line no-console\n          console.log(\"upload to cloudinary:\", result);\n        })\n        .catch(err => {\n          this.$bvToast.toast(\n            `Upload to Cloudinary unsuccessful. Check settings.`,\n            {\n              title: \"Cloudinary Upload\",\n              autoHideDelay: 5000,\n              appendToast: false\n            }\n          );\n          // eslint-disable-next-line no-console\n          console.log(\"upload to cloudinary error:\", err);\n        });\n    },\n    snapshot: function() {\n      this.canvas.width = this.video.videoWidth;\n      this.canvas.height = this.video.videoHeight;\n      this.canvas\n        .getContext(\"2d\")\n        .drawImage(this.video, 0, 0, this.canvas.width, this.canvas.height);\n      this.fileData = this.canvas.toDataURL(\"image/jpeg\");\n      this.isPhoto = true;\n      this.cameraState = false;\n      //remove any hidden links used for download\n      let hiddenLinks = document.querySelectorAll(\".hidden_links\");\n      for (let hiddenLink of hiddenLinks) {\n        document.querySelector(\"body\").remove(hiddenLink);\n      }\n    },\n    stop: function() {\n      this.video.pause();\n      if (this.currentStream) {\n        this.currentStream.getTracks().forEach(track => {\n          track.stop();\n        });\n        this.video.srcObject = null;\n      }\n      this.video.removeAttribute(\"src\");\n      this.video.load();\n      this.canvas\n        .getContext(\"2d\")\n        .clearRect(0, 0, this.canvas.width, this.canvas.height);\n      this.isPhoto = false;\n      this.cameraState = false;\n    },\n    start: function() {\n      this.stop();\n      //when starting up again use first option\n      this.selectedDevice = this.options[0].value;\n      this.getMedia().then(result => {\n        this.isStartEnabled = false;\n        this.cameraState = true;\n        // eslint-disable-next-line no-console\n        console.log(\"start camera:\", result);\n      });\n    },\n    download: function() {\n      if (this.fileData) {\n        this.canvas.width = this.video.videoWidth;\n        this.canvas.height = this.video.videoHeight;\n        this.canvas\n          .getContext(\"2d\")\n          .drawImage(this.video, 0, 0, this.canvas.width, this.canvas.height);\n        let a = document.createElement(\"a\");\n        a.classList.add(\"hidden-link\");\n        a.href = this.fileData;\n        a.textContent = \"\";\n        a.target = \"_blank\";\n        a.download = \"photo.jpeg\";\n        document.querySelector(\"body\").append(a);\n        a.click();\n      }\n    },\n    getMedia: async function() {\n      try {\n        this.stream = await navigator.mediaDevices.getUserMedia(\n          this.constraints\n        );\n        window.stream = this.stream;\n        this.currentStream = window.stream;\n        this.video.srcObject = window.stream;\n        return true;\n      } catch (err) {\n        throw err;\n      }\n    },\n    deviceChange: function() {\n      this.stop();\n      //don't change selected device\n      this.setConstraints();\n      this.getMedia().then(result => {\n        this.isStartEnabled = false;\n        this.cameraState = true;\n        // eslint-disable-next-line no-console\n        console.log(\"device change:\", result);\n      });\n    },\n    setConstraints: function() {\n      const videoContstraints = {};\n      if (this.selectedDevice === null) {\n        videoContstraints.facingMode = \"environment\";\n      } else {\n        videoContstraints.deviceId = {\n          exact: this.selectedDevice\n        };\n      }\n      this.constraints = {\n        video: videoContstraints,\n        audio: false\n      };\n    },\n    getDevices: async function() {\n      if (!navigator.mediaDevices || !navigator.mediaDevices.enumerateDevices) {\n        return false;\n      }\n      try {\n        let allDevices = await navigator.mediaDevices.enumerateDevices();\n        for (let mediaDevice of allDevices) {\n          if (mediaDevice.kind === \"videoinput\") {\n            let option = {};\n            option.text = mediaDevice.label;\n            option.value = mediaDevice.deviceId;\n            this.options.push(option);\n            this.devices.push(mediaDevice);\n          }\n        }\n        return true;\n      } catch (err) {\n        throw err;\n      }\n    }\n  },\n  mounted() {\n    this.canvas = document.querySelector(\"canvas\");\n    this.video = document.querySelector(\"video\");\n    this.getDevices()\n      .then(res => {\n        //when first loaded selected device can use 1st option\n        this.selectedDevice = this.options[0].value;\n        this.setConstraints();\n        // eslint-disable-next-line no-console\n        console.log(\"get devices:\", res);\n      })\n      .then(() => {\n        this.getMedia().then(res => {\n          this.isStartEnabled = false;\n          // eslint-disable-next-line no-console\n          console.log(\"get media\", res);\n        });\n      });\n  }\n};\n</script>\n\n<style scoped>\nbutton:disabled {\n  background: lightgray;\n  color: black;\n}\nselect option:disabled {\n  color: lightgray;\n  font-weight: bold;\n}\nform {\n  margin: 1em;\n}\n@media only screen and (min-width: 600px) {\n  .btn-group button {\n    margin: 0 0.5em;\n    border-radius: 1em !important;\n    font-size: 1em;\n    width: 6em;\n  }\n}\n.hidden-link {\n  visibility: hidden;\n}\n</style>","<template>\n  <div id=\"gallery\">\n    <h2>Gallery</h2>\n    <section id=\"images\"></section>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: \"gallery\",\n\n  mounted() {\n    //get cloudname and preset from local storage\n    if (this.$ls.get(\"cloudname\")) {\n      this.cloudname = this.$ls.get(\"cloudname\");\n    }\n    if (this.$ls.get(\"preset\")) {\n      this.preset = this.$ls.get(\"preset\");\n    }\n    //if these aren't set don't allow browse\n    /*global cloudinary*/\n    /*eslint no-undef: \"error\"*/\n    this.myGallery = cloudinary.galleryWidget({\n      container: \"#images\",\n      cloudName: this.cloudname,\n      mediaAssets: [{ tag: \"browser_upload\" }]\n    });\n    this.myGallery.render();\n  },\n  beforeDestroy: function() {\n    this.myGallery.destroy;\n  },\n  data() {\n    return {\n      myGallery: null\n    };\n  },\n  computed: {\n    cloudname: {\n      get() {\n        return this.$store.state.settings.cloudname;\n      },\n      set(value) {\n        this.$store.commit(\"updateCloudname\", value);\n      }\n    }\n  }\n};\n</script>\n\n<style scoped>\n#images {\n  width: 80%;\n  height: 20%;\n}\n</style>\n","<template>\n    <div id=\"login\">\n        <h2>Login</h2>\n        <input type=\"text\" name=\"username\" v-model=\"input.username\" placeholder=\"Username\" />\n        <input type=\"password\" name=\"password\" v-model=\"input.password\" placeholder=\"Password\" />\n        <button type=\"button\" v-on:click=\"login()\">Login</button>\n    </div>\n</template>\n\n\n<script>\n    export default {\n        name: 'Login',\n        data() {\n            return {\n                input: {\n                    username: \"\",\n                    password: \"\"\n                }\n            }\n        },\n        methods: {\n            login() {\n                if(this.input.username != \"\" && this.input.password != \"\") {\n                    alert(\"login step 1\");\n                    const axios = require('axios');\n                    axios.get('http://54.175.248.168:8081/listUsers',{\n                        params: {\n                            Username: this.input.username,\n                            Password: this.input.password\n                        }\n                    })\n                    .then(function () {\n                        alert(\"login step 2\");\n                        this.$emit(\"authenticated\", true);\n                        this.$router.replace({ name: \"Camera\" });\n                    })\n                    .catch(function () {\n                        alert(\"The username/password is incorrect\");\n                    })\n                } else {\n                    alert(\"Must enter a username and password\");\n                }\n            }\n        }\n    }\n</script>\n\n<style scoped>\n    #login {\n        width: 220px;\n        border: 1px solid #CCCCCC;\n        background-color: #FFFFFF;\n        margin: auto;\n        margin-top: 200px;\n        padding: 20px;\n    }\n</style>"]}